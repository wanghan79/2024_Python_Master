# -*- coding: utf-8 -*-
"""4次作业.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18JGTdKaVP2zWnJD_IbhF-hMDqo6zqiXU

# 1.Function Encapsulation and Generating Random Numbers with Arbitrary Parameters
"""

import random

def generate_random(*args, **kwargs):
    # Create an empty dictionary to store the generated random numbers
    random_numbers = {}

    # Handle positional arguments
    for i, arg in enumerate(args):
        # If the argument is a list, tuple, or set, generate a corresponding structure with random numbers
        if isinstance(arg, (list, tuple, set)):
            random_numbers[f'arg_{i}'] = type(arg)(random.randint(1, 100) for _ in arg)
        # If the argument is a dictionary, generate a new dictionary with random numbers as values
        elif isinstance(arg, dict):
            random_numbers[f'arg_{i}'] = {key: random.randint(1, 100) for key in arg}
        # Otherwise, generate a single random number
        else:
            random_numbers[f'arg_{i}'] = random.randint(1, 100)

    # Handle keyword arguments
    for key, value in kwargs.items():
        # If the argument is a list, tuple, or set, generate a corresponding structure with random numbers
        if isinstance(value, (list, tuple, set)):
            random_numbers[key] = type(value)(random.randint(1, 100) for _ in value)
        # If the argument is a dictionary, generate a new dictionary with random numbers as values
        elif isinstance(value, dict):
            random_numbers[key] = {k: random.randint(1, 100) for k in value}
        # Otherwise, generate a single random number
        else:
            random_numbers[key] = random.randint(1, 100)

    # Return the dictionary containing all the random numbers
    return random_numbers

# Example call
print(generate_random([1, 2, 3], (1, 2, 3), {1, 2, 3}, a=[4, 5, 6], b={'x': 7, 'y': 8}))

"""# 2.Encapsulating the Above Function into a Class"""

import random

class RandomGenerator:
    def __init__(self):
        pass

    def generate_random(self, *args, **kwargs):
        # Create an empty dictionary to store the generated random numbers
        random_numbers = {}

        # Handle positional arguments
        for i, arg in enumerate(args):
            # If the argument is a list, tuple, or set, generate a corresponding structure with random numbers
            if isinstance(arg, (list, tuple, set)):
                random_numbers[f'arg_{i}'] = type(arg)(random.randint(1, 100) for _ in arg)
            # If the argument is a dictionary, generate a new dictionary with random numbers as values
            elif isinstance(arg, dict):
                random_numbers[f'arg_{i}'] = {key: random.randint(1, 100) for key in arg}
            # Otherwise, generate a single random number
            else:
                random_numbers[f'arg_{i}'] = random.randint(1, 100)

        # Handle keyword arguments
        for key, value in kwargs.items():
            # If the argument is a list, tuple, or set, generate a corresponding structure with random numbers
            if isinstance(value, (list, tuple, set)):
                random_numbers[key] = type(value)(random.randint(1, 100) for _ in value)
            # If the argument is a dictionary, generate a new dictionary with random numbers as values
            elif isinstance(value, dict):
                random_numbers[key] = {k: random.randint(1, 100) for k in value}
            # Otherwise, generate a single random number
            else:
                random_numbers[key] = random.randint(1, 100)

        # Return the dictionary containing all the random numbers
        return random_numbers

# Example call
generator = RandomGenerator()
print(generator.generate_random([1, 2, 3], (1, 2, 3), {1, 2, 3}, a=[4, 5, 6], b={'x': 7, 'y': 8}))

"""# 3.Dynamic Parameter Decorator"""

import functools

def dynamic_decorator(*decorator_args, **decorator_kwargs):
    # Decorator factory that accepts decorator arguments
    def decorator(func):
        @functools.wraps(func)
        # Wrapper function that accepts the decorated function's arguments
        def wrapper(*args, **kwargs):
            # Print decorator arguments
            print(f'Decorator arguments: {decorator_args}, {decorator_kwargs}')
            # Print the decorated function's arguments
            print(f'Function arguments: {args}, {kwargs}')
            # Call the decorated function and return its result
            return func(*args, **kwargs)
        return wrapper
    return decorator

# Example function
@dynamic_decorator('param1', 'param2', key='value')
def example_function(x, y):
    return x + y

# Example call to the decorated function
print(example_function(5, 10))

"""# Final test: Generator Implementation of Random Structures"""

import random

def random_structure_generator(data):
    if isinstance(data, (list, tuple, set)):
        for _ in data:
            yield random.randint(1, 100)
    elif isinstance(data, dict):
        for key in data:
            yield key, random.randint(1, 100)
    else:
        yield random.randint(1, 100)

def generate_random_with_generator(*args, **kwargs):
    random_numbers = {}

    for i, arg in enumerate(args):
        if isinstance(arg, dict):
            random_numbers[f'arg_{i}'] = {k: v for k, v in random_structure_generator(arg)}
        else:
            random_numbers[f'arg_{i}'] = type(arg)(random_structure_generator(arg))

    for key, value in kwargs.items():
        if isinstance(value, dict):
            random_numbers[key] = {k: v for k, v in random_structure_generator(value)}
        else:
            random_numbers[key] = type(value)(random_structure_generator(value))

    return random_numbers

# 示例调用
print(generate_random_with_generator([1, 2, 3], (1, 2, 3), {1, 2, 3}, a=[4, 5, 6], b={'x': 7, 'y': 8}))

"""# Example Calls"""

# Using the function to generate random numbers
print(generate_random([1, 2, 3], (1, 2, 3), {1, 2, 3}, a=[4, 5, 6], b={'x': 7, 'y': 8}))

# Using the class to generate random numbers
generator = RandomGenerator()
print(generator.generate_random([1, 2, 3], (1, 2, 3), {1, 2, 3}, a=[4, 5, 6], b={'x': 7, 'y': 8}))

# Using the decorator
@dynamic_decorator('param1', 'param2', key='value')
def example_function(x, y):
    return x + y

# Example call to the decorated function
print(example_function(5, 10))